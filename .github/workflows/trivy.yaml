name: Trivy Security Scan

on:
  pull_request:
    paths:
      - '**/*.dockerfile'
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.json'

jobs:
  trivy-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Ensure Docker is installed
        run: |
          if ! command -v docker &> /dev/null
          then
            echo "Docker could not be found. Please install Docker."
            exit 1
          fi

      - name: Build an image from Dockerfile
        run: |
          docker build --file Dockerfile.app -t dvpwa.app:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dvpwa.app:${{ github.sha }}'
          format: 'table'  # Human-readable format for results
          exit-code: '0'  # Ensures the job keeps running regardless of vulnerabilities found
          ignore-unfixed: true
          vuln-type: 'os,library'  # OS and library vulnerability scanning
          severity: 'CRITICAL,HIGH'
          output: 'trivy-vuln-results.txt'

      - name: Run Trivy secret scanning
        run: |
          trivy fs --scanners secret --format table . > trivy-secrets-results.txt

      - name: Check if Trivy results were generated
        run: |
          # Prepare results for vulnerability scan
          if [ ! -s trivy-vuln-results.txt ]; then
            echo "No Trivy vulnerability results found." > formatted_vuln_results.txt
          else
            cat trivy-vuln-results.txt > formatted_vuln_results.txt
          fi

          # Prepare results for secret scan
          if [ ! -s trivy-secrets-results.txt ]; then
            echo "No secrets found." > formatted_secrets_results.txt
          else
            cat trivy-secrets-results.txt > formatted_secrets_results.txt
          fi

          # Concatenate the formatted results
          cat formatted_vuln_results.txt formatted_secrets_results.txt > formatted_results.txt
          cat formatted_results.txt  # Log the content for debugging

      - name: Set Trivy results as output
        id: set_results
        run: |
          # Store separate results as environment variables
          echo "vuln_results<<EOF" >> $GITHUB_ENV
          cat formatted_vuln_results.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "secrets_results<<EOF" >> $GITHUB_ENV
          cat formatted_secrets_results.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Comment vulnerability scan results on PR
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Trivy Vulnerability Scan Results

            Please find the vulnerability scan results below:

            ```
            ${{ env.vuln_results }}
            ```

      - name: Comment secret scan results on PR
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Trivy Secret Scan Results

            Please find the secret scan results below:

            ```
            ${{ env.secrets_results }}
            ```
